name: Monitor and Sync Home Assistant Versions

on:
  push:
    paths:
      - 'stable.json'

env:
  ALIYUN_REGISTRY: ${{ secrets.ALIYUN_REGISTRY }}
  ALIYUN_NAMESPACE: ${{ secrets.ALIYUN_NAMESPACE }}
  SUPPORTED_COMPONENTS: 'cli|dns|audio|multicast|observer'

jobs:
  monitor:
    runs-on: ubuntu-latest
    outputs:
      homeassistant_version_changed: ${{ steps.compare.outputs.homeassistant_version_changed }}
      new_homeassistant_version: ${{ steps.compare.outputs.new_homeassistant_version }}
      cli_version_changed: ${{ steps.compare.outputs.cli_version_changed }}
      new_cli_version: ${{ steps.compare.outputs.new_cli_version }}
      dns_version_changed: ${{ steps.compare.outputs.dns_version_changed }}
      new_dns_version: ${{ steps.compare.outputs.new_dns_version }}
      audio_version_changed: ${{ steps.compare.outputs.audio_version_changed }}
      new_audio_version: ${{ steps.compare.outputs.new_audio_version }}
      multicast_version_changed: ${{ steps.compare.outputs.multicast_version_changed }}
      new_multicast_version: ${{ steps.compare.outputs.new_multicast_version }}
      observer_version_changed: ${{ steps.compare.outputs.observer_version_changed }}
      new_observer_version: ${{ steps.compare.outputs.new_observer_version }}
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 2  # Need previous commit for comparison

    - name: Compare versions
      id: compare
      run: |
        # Get current and previous file content
        CURRENT=$(cat stable.json)
        PREVIOUS=$(git show HEAD^:stable.json 2>/dev/null || echo "{}")

        # Function to extract version from JSON
        extract_version() {
          echo "$1" | jq -r "$2" || echo ""
        }

        # Current versions
        CURRENT_HA=$(extract_version "$CURRENT" '.homeassistant.default')
        CURRENT_CLI=$(extract_version "$CURRENT" '.cli')
        CURRENT_DNS=$(extract_version "$CURRENT" '.dns')
        CURRENT_AUDIO=$(extract_version "$CURRENT" '.audio')
        CURRENT_MULTICAST=$(extract_version "$CURRENT" '.multicast')
        CURRENT_OBSERVER=$(extract_version "$CURRENT" '.observer')

        # Previous versions
        PREVIOUS_HA=$(extract_version "$PREVIOUS" '.homeassistant.default')
        PREVIOUS_CLI=$(extract_version "$PREVIOUS" '.cli')
        PREVIOUS_DNS=$(extract_version "$PREVIOUS" '.dns')
        PREVIOUS_AUDIO=$(extract_version "$PREVIOUS" '.audio')
        PREVIOUS_MULTICAST=$(extract_version "$PREVIOUS" '.multicast')
        PREVIOUS_OBSERVER=$(extract_version "$PREVIOUS" '.observer')

        # Check for changes and set outputs
        if [ "$CURRENT_HA" != "$PREVIOUS_HA" ] && [ -n "$CURRENT_HA" ]; then
          echo "homeassistant_version_changed=true" >> $GITHUB_OUTPUT
          echo "new_homeassistant_version=$CURRENT_HA" >> $GITHUB_OUTPUT
        fi

        if [ "$CURRENT_CLI" != "$PREVIOUS_CLI" ] && [ -n "$CURRENT_CLI" ]; then
          echo "cli_version_changed=true" >> $GITHUB_OUTPUT
          echo "new_cli_version=$CURRENT_CLI" >> $GITHUB_OUTPUT
        fi

        if [ "$CURRENT_DNS" != "$PREVIOUS_DNS" ] && [ -n "$CURRENT_DNS" ]; then
          echo "dns_version_changed=true" >> $GITHUB_OUTPUT
          echo "new_dns_version=$CURRENT_DNS" >> $GITHUB_OUTPUT
        fi

        if [ "$CURRENT_AUDIO" != "$PREVIOUS_AUDIO" ] && [ -n "$CURRENT_AUDIO" ]; then
          echo "audio_version_changed=true" >> $GITHUB_OUTPUT
          echo "new_audio_version=$CURRENT_AUDIO" >> $GITHUB_OUTPUT
        fi

        if [ "$CURRENT_MULTICAST" != "$PREVIOUS_MULTICAST" ] && [ -n "$CURRENT_MULTICAST" ]; then
          echo "multicast_version_changed=true" >> $GITHUB_OUTPUT
          echo "new_multicast_version=$CURRENT_MULTICAST" >> $GITHUB_OUTPUT
        fi

        if [ "$CURRENT_OBSERVER" != "$PREVIOUS_OBSERVER" ] && [ -n "$CURRENT_OBSERVER" ]; then
          echo "observer_version_changed=true" >> $GITHUB_OUTPUT
          echo "new_observer_version=$CURRENT_OBSERVER" >> $GITHUB_OUTPUT
        fi

    - name: Output version changes
      run: |
        if [ "${{ steps.compare.outputs.homeassistant_version_changed }}" = "true" ]; then
          echo "homeassistant: ${{ steps.compare.outputs.new_homeassistant_version }}"
        fi

        if [ "${{ steps.compare.outputs.cli_version_changed }}" = "true" ]; then
          echo "cli: ${{ steps.compare.outputs.new_cli_version }}"
        fi

        if [ "${{ steps.compare.outputs.dns_version_changed }}" = "true" ]; then
          echo "dns: ${{ steps.compare.outputs.new_dns_version }}"
        fi

        if [ "${{ steps.compare.outputs.audio_version_changed }}" = "true" ]; then
          echo "audio: ${{ steps.compare.outputs.new_audio_version }}"
        fi

        if [ "${{ steps.compare.outputs.multicast_version_changed }}" = "true" ]; then
          echo "multicast: ${{ steps.compare.outputs.new_multicast_version }}"
        fi

        if [ "${{ steps.compare.outputs.observer_version_changed }}" = "true" ]; then
          echo "observer: ${{ steps.compare.outputs.new_observer_version }}"
        fi

        if [ "${{ steps.compare.outputs.homeassistant_version_changed }}" != "true" ] && \
           [ "${{ steps.compare.outputs.cli_version_changed }}" != "true" ] && \
           [ "${{ steps.compare.outputs.dns_version_changed }}" != "true" ] && \
           [ "${{ steps.compare.outputs.audio_version_changed }}" != "true" ] && \
           [ "${{ steps.compare.outputs.multicast_version_changed }}" != "true" ] && \
           [ "${{ steps.compare.outputs.observer_version_changed }}" != "true" ]; then
          echo "No version changes detected in monitored components."
        fi

  sync_homeassistant:
    needs: monitor
    if: ${{ needs.monitor.outputs.homeassistant_version_changed == 'true' }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        arch:
          - 'home-assistant'
          - 'amd64-homeassistant'
          - 'i386-homeassistant'
          - 'armhf-homeassistant'
          - 'armv7-homeassistant'
          - 'aarch64-homeassistant'
          - 'generic-x86-64-homeassistant'
          - 'intel-nuc-homeassistant'
          - 'khadas-vim3-homeassistant'
          - 'odroid-c2-homeassistant'
          - 'odroid-c4-homeassistant'
          - 'odroid-m1-homeassistant'
          - 'odroid-n2-homeassistant'
          - 'odroid-xu-homeassistant'
          - 'qemuarm-homeassistant'
          - 'qemuarm-64-homeassistant'
          - 'qemux86-homeassistant'
          - 'qemux86-64-homeassistant'
          - 'raspberrypi-homeassistant'
          - 'raspberrypi2-homeassistant'
          - 'raspberrypi3-homeassistant'
          - 'raspberrypi3-64-homeassistant'
          - 'raspberrypi4-homeassistant'
          - 'raspberrypi4-64-homeassistant'
          - 'raspberrypi5-64-homeassistant'
          - 'tinker-homeassistant'
          - 'yellow-homeassistant'
          - 'green-homeassistant'
    steps:
      - uses: actions/checkout@v4

      - name: Login to Aliyun
        uses: docker/login-action@v2
        with:
          registry: ${{ env.ALIYUN_REGISTRY }}
          username: ${{ secrets.ALIYUN_USERNAME }}
          password: ${{ secrets.ALIYUN_PASSWORD }}

      - name: Process Home Assistant image
        run: |
          version="${{ needs.monitor.outputs.new_homeassistant_version }}"
          SRC_IMAGE="ghcr.io/home-assistant/${{ matrix.arch }}"
          DEST_IMAGE="${{ env.ALIYUN_REGISTRY }}/${{ env.ALIYUN_NAMESPACE }}/${{ matrix.arch }}"

          docker pull "${SRC_IMAGE}:${version}" || {
            echo "::warning::跳过 ${{ matrix.arch }}:${version}"
            exit 0
          }

          # 打标签
          docker tag "${SRC_IMAGE}:${version}" "${DEST_IMAGE}:${version}"
          docker tag "${SRC_IMAGE}:${version}" "${DEST_IMAGE}:latest"

          # 主镜像特殊标签
          if [ "${{ matrix.arch }}" = "home-assistant" ]; then
            ym_tag=$(echo "${version}" | awk -F. '{print $1"."$2}')
            docker tag "${SRC_IMAGE}:${version}" "${DEST_IMAGE}:stable"
            docker tag "${SRC_IMAGE}:${version}" "${DEST_IMAGE}:${ym_tag}"
          fi

          # 推送
          docker push "${DEST_IMAGE}:${version}"
          docker push "${DEST_IMAGE}:latest"
          [ "${{ matrix.arch }}" = "home-assistant" ] && docker push "${DEST_IMAGE}:stable"
          [ "${{ matrix.arch }}" = "home-assistant" ] && docker push "${DEST_IMAGE}:${ym_tag}"

          # 清理
          docker rmi "${SRC_IMAGE}:${version}" || true
          [ "${{ matrix.arch }}" = "home-assistant" ] && docker rmi "${DEST_IMAGE}:${ym_tag}" || true

  sync_hassio_components:
    needs: monitor
    if: |
      needs.monitor.outputs.cli_version_changed == 'true' ||
      needs.monitor.outputs.dns_version_changed == 'true' ||
      needs.monitor.outputs.audio_version_changed == 'true' ||
      needs.monitor.outputs.multicast_version_changed == 'true' ||
      needs.monitor.outputs.observer_version_changed == 'true'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        component: ['cli', 'dns', 'audio', 'multicast', 'observer']
        include:
          - component: 'cli'
            version_changed: ${{ needs.monitor.outputs.cli_version_changed == 'true' }}
            new_version: ${{ needs.monitor.outputs.new_cli_version }}
          - component: 'dns'
            version_changed: ${{ needs.monitor.outputs.dns_version_changed == 'true' }}
            new_version: ${{ needs.monitor.outputs.new_dns_version }}
          - component: 'audio'
            version_changed: ${{ needs.monitor.outputs.audio_version_changed == 'true' }}
            new_version: ${{ needs.monitor.outputs.new_audio_version }}
          - component: 'multicast'
            version_changed: ${{ needs.monitor.outputs.multicast_version_changed == 'true' }}
            new_version: ${{ needs.monitor.outputs.new_multicast_version }}
          - component: 'observer'
            version_changed: ${{ needs.monitor.outputs.observer_version_changed == 'true' }}
            new_version: ${{ needs.monitor.outputs.new_observer_version }}
        arch: ['amd64', 'i386', 'armhf', 'armv7', 'aarch64']
    steps:
      - uses: actions/checkout@v4

      - name: Login to Aliyun
        uses: docker/login-action@v2
        with:
          registry: ${{ env.ALIYUN_REGISTRY }}
          username: ${{ secrets.ALIYUN_USERNAME }}
          password: ${{ secrets.ALIYUN_PASSWORD }}

      - name: Process HassIO component
        if: ${{ matrix.version_changed == 'true' }}
        run: |
          component="${{ matrix.component }}"
          version="${{ matrix.new_version }}"
          SRC_IMAGE="ghcr.io/home-assistant/${{ matrix.arch }}-hassio-${component}"
          DEST_IMAGE="${{ env.ALIYUN_REGISTRY }}/${{ env.ALIYUN_NAMESPACE }}/${{ matrix.arch }}-hassio-${component}"

          docker pull "${SRC_IMAGE}:${version}" || {
            echo "::warning::跳过 ${{ matrix.arch }}-hassio-${component}:${version}"
            exit 0
          }

          docker tag "${SRC_IMAGE}:${version}" "${DEST_IMAGE}:${version}"
          docker tag "${SRC_IMAGE}:${version}" "${DEST_IMAGE}:latest"

          docker push "${DEST_IMAGE}:${version}"
          docker push "${DEST_IMAGE}:latest"

          docker rmi "${SRC_IMAGE}:${version}" || true