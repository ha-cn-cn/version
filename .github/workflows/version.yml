name: Version

on:
  workflow_dispatch:
    inputs:
      files:
        description: 'File(s) to run action against (space separated)'
        required: true
  pull_request:
    branches: ["master"]
  push:
    branches: ["master"]
    paths:
    - '*.txt'
    - '*.json'
    - '*.png'
    - '.github/workflows/version.yml'

env:
  PYTHON_VERSION: "3.10"
  COSIGN_VERSION: "v2.2.3"
  SIGNED_FILES: "apparmor.txt apparmor_beta.txt apparmor_dev.txt apparmor_stable.txt beta.json dev.json stable.json"

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
    - name: Checkout the repository
      uses: actions/checkout@v4

    - name: Lint with JQ
      uses: ha-cn-cn/actions/helpers/jq@master

  prepare:
    name: Prepare
    needs: ["lint"]
    runs-on: ubuntu-latest
    outputs:
      files: ${{ steps.calc_file_list.outputs.changed_files }}
      sign_matrix: ${{ steps.calc_file_list.outputs.result }}
      modified_files: ${{ steps.verify_modification.outputs.modified_files }}
    steps:
    - name: Checkout the repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Get changed files for push
      if: github.event_name == 'push'
      id: changed_files_push
      uses: masesgroup/retrieve-changed-files@v3.0.0
      with:
        format: 'json'

    - name: Calculate files to sign and push
      uses: actions/github-script@v7
      id: calc_file_list
      with:
        script: |
          const signed_files = "${{ env.SIGNED_FILES }}".split(' ')
          if ("${{ github.event_name }}" === "push") {
            changed_files = JSON.parse('${{ steps.changed_files_push.outputs.all }}')
            if (changed_files.includes(".github/workflows/version.yml")) {
              changed_files = [...new Set([...changed_files, ...signed_files])]
            }
            core.setOutput("changed_files", changed_files.join(' '))
            return changed_files.filter(value => signed_files.includes(value))
          } else {
            input_files = "${{ github.event.inputs.files }}".split(' ')
            core.setOutput("changed_files", input_files.join(' '))
            return input_files.filter(value => signed_files.includes(value))
          }

    - name: Modify JSON files conditionally
      id: modify_files
      run: |
        modified_files=""
        for file in stable.json beta.json; do
          if [ -f "$file" ]; then
            echo "Checking file: $file"
            
            # 检查是否需要修改
            need_modify=false
            if grep -q "os-artifacts.home-assistant.io" "$file"; then
              echo "Found 'os-artifacts.home-assistant.io' in $file"
              need_modify=true
            fi
            if grep -q "ghcr.io/home-assistant" "$file"; then
              echo "Found 'ghcr.io/home-assistant' in $file"
              need_modify=true
            fi
            
            if [ "$need_modify" = true ]; then
              echo "Processing modifications for $file"
              # 备份原始文件
              cp -v "$file" "$file.bak"
              # 执行条件替换
              sed -i \
                -e 's|os-artifacts.home-assistant.io|os-artifacts.smart-assistant.cn|g' \
                -e 's|ghcr.io/home-assistant|ha-cn.cn/home-assistant-cn|g' \
                "$file"
              
              # 检查是否修改成功
              if ! diff -q "$file" "$file.bak" > /dev/null; then
                echo "File $file was modified"
                modified_files="$modified_files $file"
                echo "Modified content:"
                cat "$file"
              else
                echo "No actual changes made to $file"
              fi
              rm -v "$file.bak"
            else
              echo "No target strings found in $file, skipping modification"
            fi
          else
            echo "File $file not found"
          fi
        done
        echo "modified_files=${modified_files}" >> $GITHUB_OUTPUT

    - name: Verify file modification
      id: verify_modification
      if: steps.modify_files.outputs.modified_files != ''
      run: |
        echo "=== File Content Verification ==="
        for file in ${{ steps.modify_files.outputs.modified_files }}; do
          echo "Verifying $file..."
          # 验证替换是否完成
          if grep -q "os-artifacts.home-assistant.io" "$file"; then
            echo "::error::Original string still exists in $file"
            exit 1
          fi
          if grep -q "ghcr.io/home-assistant" "$file"; then
            echo "::error::Original string still exists in $file"
            exit 1
          fi
          # 验证新字符串是否存在
          if ! grep -q "os-artifacts.smart-assistant.cn" "$file"; then
            echo "::error::Replacement string missing in $file"
            exit 1
          fi
          if ! grep -q "ha-cn.cn/home-assistant-cn" "$file"; then
            echo "::error::Replacement string missing in $file"
            exit 1
          fi
          echo "All verifications passed for $file"
        done
        echo "modified_files=${{ steps.modify_files.outputs.modified_files }}" >> $GITHUB_OUTPUT

    - name: Save modified files
      if: steps.modify_files.outputs.modified_files != ''
      uses: actions/cache/save@v4
      with:
        path: |
          stable.json
          beta.json
        key: ${{ github.run_id }}-modified-files

  signing:
    name: Sign ${{ matrix.path }}
    needs: ["prepare"]
    if: ${{ (github.event_name == 'push' || github.event_name == 'workflow_dispatch') && needs.prepare.outputs.sign_matrix != '[]' }}
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      packages: write
    strategy:
      matrix:
        path: ${{ fromJson(needs.prepare.outputs.sign_matrix) }}
    steps:
      - name: Checkout the repository
        uses: actions/checkout@v4

      - name: Restore modified files
        uses: actions/cache/restore@v4
        id: restore-modified-files
        with:
          path: |
            stable.json
            beta.json
          key: ${{ github.run_id }}-modified-files

      - name: Verify restored files
        if: steps.restore-modified-files.outputs.cache-hit == 'true'
        run: |
          echo "=== Restored File Contents ==="
          for file in stable.json beta.json; do
            if [ -f "$file" ]; then
              echo "File: $file"
              grep -E "os-artifacts.smart-assistant.cn|ha-cn.cn/home-assistant-cn" "$file" || echo "No replacements found!"
              echo "------------------------"
            fi
          done

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3.4.0
        with:
          registry: ghcr.io
          username: home-assistant
          password: ${{ secrets.GITHUB_TOKEN }}

      - uses: sigstore/cosign-installer@main
        with:
          cosign-release: ${{ env.COSIGN_VERSION }}

      - name: Setup Python version ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install AWS CLI
        run: pip install awscli

      - name: Sign Cosign
        run: |
          cosign sign-blob --yes ${{ matrix.path }} --bundle ${{ matrix.path }}.sig

      - name: Upload signature
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: |
          aws s3 sync . s3://version.smart-assistant.cn --exclude "*" --include "${{ matrix.path }}.sig"

  upload:
    name: Upload
    needs: ["signing", "prepare"]
    if: ${{ !failure() && !cancelled() && (github.event_name == 'push' || github.event_name == 'workflow_dispatch') }}
    runs-on: ubuntu-latest
    steps:
    - name: Checkout the repository
      uses: actions/checkout@v4

    - name: Restore modified files
      uses: actions/cache/restore@v4
      id: restore-modified-files
      with:
        path: |
          stable.json
          beta.json
        key: ${{ github.run_id }}-modified-files

    - name: Show modified file contents
      run: |
        echo "=== Final File Contents Before Upload ==="
        for file in stable.json beta.json; do
          if [ -f "$file" ]; then
            echo "File: $file"
            echo "Content:"
            cat "$file"
            echo "Replacements check:"
            grep -E "os-artifacts.smart-assistant.cn|ha-cn.cn/home-assistant-cn" "$file" || echo "::error::Replacements missing in $file"
            echo "------------------------"
          fi
        done

    - name: Verify files before upload
      run: |
        fail=0
        for file in ${{ needs.prepare.outputs.modified_files }}; do
          if ! grep -q "os-artifacts.smart-assistant.cn" "$file"; then
            echo "::error::First replacement missing in $file"
            fail=1
          fi
          if ! grep -q "ha-cn.cn/home-assistant-cn" "$file"; then
            echo "::error::Second replacement missing in $file"
            fail=1
          fi
        done
        if [ "$fail" -eq 1 ]; then
          exit 1
        fi

    - name: Setup Python version ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install AWS CLI
      run: pip install awscli

    - name: Upload files
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      run: |
        for file in ${{ needs.prepare.outputs.files }}; do
          if [[ "$file" =~ \.txt|\.json|\.png ]]; then
            aws s3 sync . s3://version.smart-assistant.cn --exclude "*" --include "$file"
          fi
        done

    - name: Gather files for cache flush
      id: flush
      run: |
        declare -a files
        for file in ${{ needs.prepare.outputs.files }}; do
          if [[ "$file" =~ \.txt|\.json ]]; then
            files+=("\"https:\/\/version.smart-assistant.cn\/$file\", ")
            if [[ "${{ env.SIGNED_FILES }}" =~ $file ]]; then
              files+=("\"https:\/\/version.smart-assistant.cn\/$file.sig\", ")
            fi
          fi
        done
        echo "files=[$(echo ${files[@]} | rev | cut -c 2- | rev)]" >> $GITHUB_OUTPUT

    - name: Flush CloudFlare cache
      run: |
        curl --silent --show-error --fail -X POST \
          "https://api.cloudflare.com/client/v4/zones/${{ secrets.CF_ZONE }}/purge_cache" \
          -H "Authorization: Bearer ${{ secrets.CF_PURGE_TOKEN }}" \
          -H "Content-Type: application/json" \
          --data '{"files": ${{ steps.flush.outputs.files }}}'